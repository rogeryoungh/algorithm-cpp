<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Roger Young</title>
    <link>https://algo.rogery.dev/post/</link>
    <description>Recent content in Posts on Roger Young</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2023 [Roger Young](https://rogery.dev)</copyright>
    <lastBuildDate>Fri, 20 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://algo.rogery.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NTT</title>
      <link>https://algo.rogery.dev/post/math/poly/ntt/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://algo.rogery.dev/post/math/poly/ntt/</guid>
      <description>多项式 NTT #ifndef ALGO_MATH_POLY_NTT #define ALGO_MATH_POLY_NTT #include &amp;quot;../../base.hpp&amp;quot; #include &amp;quot;../../other/modint/modint-concept.hpp&amp;quot; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;bit&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;span&amp;gt; #include &amp;lt;vector&amp;gt; template &amp;lt;static_modint_concept ModT&amp;gt; class NttInfo { protected: enum : typename ModT::value_type { P = ModT::get_mod(), g = 3, // 原根 max_bit = (P - 1) &amp;amp; -(P - 1), iv2 = (P + 1) / 2 }; inline static std::vector&amp;lt;ModT&amp;gt; rt{1, 1}; inline static std::array&amp;lt;ModT, 32&amp;gt; ivn{1, iv2}; static ModT get_ivn(u32 n) { return ivn[std::countr_zero(n)]; } static void prepare_root(u32 m) { assert(m &amp;lt;= max_bit); while (rt.</description>
    </item>
    
    <item>
      <title>Poly</title>
      <link>https://algo.rogery.dev/post/math/poly/poly/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://algo.rogery.dev/post/math/poly/poly/</guid>
      <description>多项式 NTT #ifndef ALGO_MATH_POLY_BASE #define ALGO_MATH_POLY_BASE #include &amp;quot;../../other/modint/modint-concept.hpp&amp;quot; #include &amp;quot;ntt.hpp&amp;quot; #include &amp;quot;vec-dots.hpp&amp;quot; #include &amp;lt;vector&amp;gt; template &amp;lt;static_modint_concept ModT&amp;gt; class Poly : public std::vector&amp;lt;ModT&amp;gt; { using Vec = typename std::vector&amp;lt;ModT&amp;gt;; public: using Vec::resize; using Vec::size; using Vec::operator[]; using Vec::begin; using Vec::cbegin; using Vec::cend; using Vec::end; Poly() = default; Poly(u32 len) : Vec(len) { self.resize(len); } Poly(const std::vector&amp;lt;u32&amp;gt; &amp;amp;v) : Vec(v.begin(), v.end()) {} Poly(const std::vector&amp;lt;ModT&amp;gt; &amp;amp;v) : Vec(v.begin(), v.end()) {} Poly &amp;amp;operator*=(const Poly &amp;amp;rhs) { if (self.</description>
    </item>
    
    <item>
      <title>算法库</title>
      <link>https://algo.rogery.dev/post/base/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://algo.rogery.dev/post/base/</guid>
      <description>实现的算法列表。
Math Poly Poly 骨架，math/poly/poly-base.hpp。 NTT，math/poly/ntt.hpp。 </description>
    </item>
    
  </channel>
</rss>
